using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace PharmaPlus.Models
{
    public class CheckoutViewModel
    {
        public List<CartItemViewModel> CartItems { get; set; } = new List<CartItemViewModel>();
        public ShippingInfoViewModel ShippingInfo { get; set; } = new ShippingInfoViewModel();
        public PaymentInfoViewModel PaymentInfo { get; set; } = new PaymentInfoViewModel();
        
        public decimal SubTotal => CartItems.Sum(item => item.SubTotal);
        public decimal ShippingFee => CartItems.Any() ? 30000 : 0;
        public decimal TotalAmount => SubTotal + ShippingFee;
        
        public string FormattedSubTotal => SubTotal.ToString("N0") + " VNƒê";
        public string FormattedShippingFee => ShippingFee.ToString("N0") + " VNƒê";
        public string FormattedTotalAmount => TotalAmount.ToString("N0") + " VNƒê";
        
        public bool HasPrescriptionItems => CartItems.Any(item => item.PrescriptionRequired);
        public int TotalItems => CartItems.Sum(item => item.Quantity);
        public bool IsValid => CartItems.Any() && ShippingInfo.IsValid && PaymentInfo.IsValid;
    }
    
    public class ShippingInfoViewModel
    {
        [Required(ErrorMessage = "Vui l√≤ng nh·∫≠p h·ªç t√™n")]
        [Display(Name = "H·ªç t√™n ng∆∞·ªùi nh·∫≠n")]
        [StringLength(50, ErrorMessage = "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±")]
        public string RecipientName { get; set; }
        
        [Required(ErrorMessage = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i")]
        [Display(Name = "S·ªë ƒëi·ªán tho·∫°i")]
        [RegularExpression(@"^(0|\+84)[0-9]{9,10}$", ErrorMessage = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")]
        public string RecipientPhone { get; set; }
        
        [Required(ErrorMessage = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng")]
        [Display(Name = "ƒê·ªãa ch·ªâ giao h√†ng")]
        public string ShippingAddress { get; set; }
        
        [Display(Name = "Ghi ch√∫ ƒë∆°n h√†ng")]
        public string OrderNotes { get; set; }
        
        public bool IsValid => !string.IsNullOrEmpty(RecipientName) && 
                              !string.IsNullOrEmpty(RecipientPhone) && 
                              !string.IsNullOrEmpty(ShippingAddress);
    }
    
    public class PaymentInfoViewModel
    {
        [Required(ErrorMessage = "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n")]
        [Display(Name = "Ph∆∞∆°ng th·ª©c thanh to√°n")]
        public string PaymentMethod { get; set; }
        
        public bool IsValid => !string.IsNullOrEmpty(PaymentMethod);
        
        // üî• FIX: S·ª≠a t·ª´ List<string> th√†nh List<PaymentMethodViewModel>
        public List<PaymentMethodViewModel> AvailablePaymentMethods { get; set; } = new List<PaymentMethodViewModel>
        {
            new PaymentMethodViewModel 
            { 
                Id = "cod", 
                Name = "Thanh to√°n khi nh·∫≠n h√†ng (COD)", 
                Description = "B·∫°n s·∫Ω thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n ƒë∆∞·ª£c h√†ng", 
                Icon = "fa-money-bill",
                Color = "#28a745"
            },
            new PaymentMethodViewModel 
            { 
                Id = "banking", 
                Name = "Chuy·ªÉn kho·∫£n ng√¢n h√†ng", 
                Description = "Chuy·ªÉn kho·∫£n ƒë·∫øn t√†i kho·∫£n ng√¢n h√†ng c·ªßa PharmaPlus", 
                Icon = "fa-university",
                Color = "#007bff"
            },
            new PaymentMethodViewModel 
            { 
                Id = "momo", 
                Name = "V√≠ ƒëi·ªán t·ª≠ MoMo", 
                Description = "Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ MoMo", 
                Icon = "fa-wallet",
                Color = "#ae2070"
            },
            new PaymentMethodViewModel 
            { 
                Id = "zalopay", 
                Name = "ZaloPay", 
                Description = "Thanh to√°n qua ZaloPay", 
                Icon = "fa-qrcode",
                Color = "#0066b3" 
            }
        };
    }
    
    public class PaymentMethodViewModel
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Icon { get; set; }
        public string Color { get; set; } = "#333";
    }
    
    public class OrderConfirmationViewModel
    {
        public int OrderId { get; set; }
        public string OrderStatus { get; set; }
        public string RecipientName { get; set; }
        public string RecipientPhone { get; set; }
        public string ShippingAddress { get; set; }
        public string PaymentMethod { get; set; }
        public string PaymentStatus { get; set; }
        public DateTime OrderDate { get; set; }
        public decimal TotalAmount { get; set; }
        public List<CartItemViewModel> OrderItems { get; set; } = new List<CartItemViewModel>();
        
        public string FormattedTotalAmount => TotalAmount.ToString("N0") + " VNƒê";
        public string FormattedOrderDate => OrderDate.ToString("dd/MM/yyyy HH:mm:ss");
        
        // üî• FIX: Th√™m computed property ƒë·ªÉ ki·ªÉm tra payment status
        public string PaymentStatusCssClass 
        { 
            get 
            {
                if (PaymentStatus == "ƒê√£ thanh to√°n") return "paid";
                if (PaymentStatus == "Thanh to√°n khi nh·∫≠n h√†ng") return "cod";
                return "pending";
            } 
        }
        
        public bool ShowSimpleSuccess => !OrderItems.Any();
    }
}