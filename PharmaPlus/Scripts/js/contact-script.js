/**
 * Contact Functionality JavaScript
 * X·ª≠ l√Ω t∆∞∆°ng t√°c v√† hi·ªáu ·ª©ng cho ch·ª©c nƒÉng li√™n h·ªá
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üìû Contact script initialized');
    
    // Kh·ªüi t·∫°o c√°c ch·ª©c nƒÉng
    initContactFormAnimations();
    initFaqAccordion();
    initHistoryPage();
    initFloatingShapes();
    fixBodyScrolling();
    
    // Kh·ªüi t·∫°o c√°c hi·ªáu ·ª©ng AOS n·∫øu th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c t·∫£i
    if (typeof AOS !== 'undefined') {
        AOS.init({
            duration: 800,
            easing: 'ease-out-cubic',
            once: true,
            offset: 50
        });
    }
});

/**
 * Kh·ªüi t·∫°o c√°c hi·ªáu ·ª©ng cho form li√™n h·ªá
 */
function initContactFormAnimations() {
    const form = document.getElementById('contactForm');
    if (!form) return;
    
    // Hi·ªáu ·ª©ng focus cho c√°c tr∆∞·ªùng input
    const inputs = form.querySelectorAll('input, textarea, select');
    inputs.forEach(input => {
        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ gi√° tr·ªã khi t·∫£i trang
        if (input.value !== '') {
            input.parentElement.classList.add('focused');
        }
        
        // X·ª≠ l√Ω s·ª± ki·ªán focus/blur
        input.addEventListener('focus', function() {
            this.parentElement.classList.add('focused');
        });
        
        input.addEventListener('blur', function() {
            if (this.value === '') {
                this.parentElement.classList.remove('focused');
            }
        });
    });
    
    // Hi·ªáu ·ª©ng n√∫t g·ª≠i khi submit form
    form.addEventListener('submit', function(e) {
        // Ki·ªÉm tra validate
        const isValid = validateContactForm();
        if (!isValid) {
            e.preventDefault();
            return;
        }
        
        // Hi·ªáu ·ª©ng n√∫t g·ª≠i
        const submitBtn = this.querySelector('.btn-send');
        if (submitBtn) {
            submitBtn.classList.add('sending');
            submitBtn.querySelector('.btn-text').textContent = 'ƒêang g·ª≠i...';
            
            // Hi·ªáu ·ª©ng ch·∫°y v√≤ng tr√≤n
            const iconElem = submitBtn.querySelector('i');
            iconElem.className = 'fas fa-spinner fa-spin';
            
            // V√¥ hi·ªáu h√≥a n√∫t ƒë·ªÉ tr√°nh g·ª≠i nhi·ªÅu l·∫ßn
            submitBtn.disabled = true;
        }
    });
    
    // Th√™m hi·ªáu ·ª©ng ripple cho buttons
    const buttons = document.querySelectorAll('.btn-send, .btn-history');
    buttons.forEach(button => {
        button.addEventListener('click', createRippleEffect);
    });
}

/**
 * Ki·ªÉm tra form tr∆∞·ªõc khi g·ª≠i
 */
function validateContactForm() {
    const form = document.getElementById('contactForm');
    if (!form) return true;
    
    let isValid = true;
    const nameInput = form.querySelector('input[name="Name"]');
    const emailInput = form.querySelector('input[name="Email"]');
    const subjectInput = form.querySelector('select[name="Subject"]');
    const messageInput = form.querySelector('textarea[name="Message"]');
    
    // X√≥a c√°c th√¥ng b√°o l·ªói c≈©
    const errorMessages = form.querySelectorAll('.field-error');
    errorMessages.forEach(error => error.remove());
    
    // Ki·ªÉm tra t√™n
    if (!nameInput.value.trim()) {
        showFieldError(nameInput, 'Vui l√≤ng nh·∫≠p h·ªç t√™n');
        isValid = false;
    }
    
    // Ki·ªÉm tra email
    if (!emailInput.value.trim()) {
        showFieldError(emailInput, 'Vui l√≤ng nh·∫≠p email');
        isValid = false;
    } else if (!isValidEmail(emailInput.value.trim())) {
        showFieldError(emailInput, 'Email kh√¥ng h·ª£p l·ªá');
        isValid = false;
    }
    
    // Ki·ªÉm tra ch·ªß ƒë·ªÅ
    if (subjectInput && subjectInput.value === '') {
        showFieldError(subjectInput, 'Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ');
        isValid = false;
    }
    
    // Ki·ªÉm tra n·ªôi dung
    if (!messageInput.value.trim()) {
        showFieldError(messageInput, 'Vui l√≤ng nh·∫≠p n·ªôi dung li√™n h·ªá');
        isValid = false;
    } else if (messageInput.value.trim().length < 10) {
        showFieldError(messageInput, 'N·ªôi dung qu√° ng·∫Øn (t·ªëi thi·ªÉu 10 k√Ω t·ª±)');
        isValid = false;
    }
    
    // N·∫øu c√≥ l·ªói, cu·ªôn ƒë·∫øn l·ªói ƒë·∫ßu ti√™n
    if (!isValid) {
        const firstError = form.querySelector('.field-error');
        if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }
    
    return isValid;
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho tr∆∞·ªùng input
 */
function showFieldError(inputElement, message) {
    const formGroup = inputElement.closest('.form-group');
    const errorElem = document.createElement('div');
    errorElem.className = 'field-error';
    errorElem.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
    formGroup.appendChild(errorElem);
    
    // Highlight tr∆∞·ªùng input
    inputElement.classList.add('input-error');
    
    // X√≥a l·ªói v√† highlight khi ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
    inputElement.addEventListener('input', function() {
        const error = formGroup.querySelector('.field-error');
        if (error) error.remove();
        inputElement.classList.remove('input-error');
    }, { once: true });
}

/**
 * Ki·ªÉm tra email h·ª£p l·ªá
 */
function isValidEmail(email) {
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email.toLowerCase());
}

/**
 * T·∫°o hi·ªáu ·ª©ng ripple khi click button
 */
function createRippleEffect(event) {
    const button = event.currentTarget;
    
    // X√≥a c√°c ripple c≈©
    const ripples = button.querySelectorAll('.ripple');
    ripples.forEach(ripple => {
        ripple.remove();
    });
    
    const ripple = document.createElement('span');
    ripple.classList.add('ripple');
    button.appendChild(ripple);
    
    const buttonRect = button.getBoundingClientRect();
    const diameter = Math.max(buttonRect.width, buttonRect.height);
    const radius = diameter / 2;
    
    ripple.style.width = ripple.style.height = `${diameter}px`;
    ripple.style.left = `${event.clientX - buttonRect.left - radius}px`;
    ripple.style.top = `${event.clientY - buttonRect.top - radius}px`;
    
    ripple.classList.add('ripple-effect');
    
    // X√≥a ripple sau khi animation k·∫øt th√∫c
    setTimeout(() => {
        ripple.remove();
    }, 600);
}

/**
 * Kh·ªüi t·∫°o FAQ Accordion
 */
function initFaqAccordion() {
    const faqItems = document.querySelectorAll('.faq-item');
    if (!faqItems.length) return;
    
    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');
        const answer = item.querySelector('.faq-answer');
        
        // T·∫•t c·∫£ c√°c c√¢u tr·∫£ l·ªùi ban ƒë·∫ßu ·∫©n (tr·ª´ c√¢u ƒë·∫ßu ti√™n)
        if (item !== faqItems[0]) {
            answer.style.display = 'none';
        } else {
            item.classList.add('active');
            const icon = item.querySelector('.faq-icon i');
            if (icon) icon.classList.replace('fa-chevron-down', 'fa-chevron-up');
        }
        
        question.addEventListener('click', function() {
            // Toggle active class
            const isActive = item.classList.contains('active');
            
            // ƒê√≥ng t·∫•t c·∫£ c√°c c√¢u h·ªèi kh√°c
            faqItems.forEach(otherItem => {
                if (otherItem !== item && otherItem.classList.contains('active')) {
                    otherItem.classList.remove('active');
                    const otherAnswer = otherItem.querySelector('.faq-answer');
                    const otherIcon = otherItem.querySelector('.faq-icon i');
                    
                    if (otherAnswer) slideUp(otherAnswer, 200);
                    if (otherIcon) otherIcon.classList.replace('fa-chevron-up', 'fa-chevron-down');
                }
            });
            
            // Toggle c√¢u h·ªèi hi·ªán t·∫°i
            if (!isActive) {
                item.classList.add('active');
                if (answer) slideDown(answer, 200);
                const icon = item.querySelector('.faq-icon i');
                if (icon) icon.classList.replace('fa-chevron-down', 'fa-chevron-up');
            } else {
                item.classList.remove('active');
                if (answer) slideUp(answer, 200);
                const icon = item.querySelector('.faq-icon i');
                if (icon) icon.classList.replace('fa-chevron-up', 'fa-chevron-down');
            }
        });
    });
}

/**
 * SlideUp animation helper
 */
function slideUp(element, duration = 300) {
    element.style.height = element.offsetHeight + 'px';
    element.offsetHeight; // Force reflow
    element.style.transitionProperty = 'height, margin, padding';
    element.style.transitionDuration = duration + 'ms';
    element.style.overflow = 'hidden';
    element.style.height = 0;
    element.style.paddingTop = 0;
    element.style.paddingBottom = 0;
    element.style.marginTop = 0;
    element.style.marginBottom = 0;
    
    setTimeout(() => {
        element.style.display = 'none';
        element.style.removeProperty('height');
        element.style.removeProperty('padding-top');
        element.style.removeProperty('padding-bottom');
        element.style.removeProperty('margin-top');
        element.style.removeProperty('margin-bottom');
        element.style.removeProperty('overflow');
        element.style.removeProperty('transition-duration');
        element.style.removeProperty('transition-property');
    }, duration);
}

/**
 * SlideDown animation helper
 */
function slideDown(element, duration = 300) {
    element.style.removeProperty('display');
    let display = window.getComputedStyle(element).display;
    if (display === 'none') display = 'block';
    element.style.display = display;
    
    const height = element.offsetHeight;
    element.style.overflow = 'hidden';
    element.style.height = 0;
    element.style.paddingTop = 0;
    element.style.paddingBottom = 0;
    element.style.marginTop = 0;
    element.style.marginBottom = 0;
    element.offsetHeight; // Force reflow
    
    element.style.transitionProperty = 'height, margin, padding';
    element.style.transitionDuration = duration + 'ms';
    element.style.height = height + 'px';
    element.style.removeProperty('padding-top');
    element.style.removeProperty('padding-bottom');
    element.style.removeProperty('margin-top');
    element.style.removeProperty('margin-bottom');
    
    setTimeout(() => {
        element.style.removeProperty('height');
        element.style.removeProperty('overflow');
        element.style.removeProperty('transition-duration');
        element.style.removeProperty('transition-property');
    }, duration);
}

/**
 * Kh·ªüi t·∫°o trang l·ªãch s·ª≠ li√™n h·ªá
 */
function initHistoryPage() {
    const contactCards = document.querySelectorAll('.contact-card');
    if (!contactCards.length) return;
    
    // Hi·ªáu ·ª©ng staggered fade-in cho c√°c card
    contactCards.forEach((card, index) => {
        setTimeout(() => {
            card.classList.add('card-visible');
        }, 100 * index);
    });
    
    // Hi·ªáu ·ª©ng toggle n·ªôi dung
    const toggleBtns = document.querySelectorAll('.toggle-message');
    toggleBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const messageContent = this.closest('.contact-card').querySelector('.message-content');
            const isExpanded = messageContent.classList.contains('expanded');
            
            if (isExpanded) {
                messageContent.classList.remove('expanded');
                this.innerHTML = 'Xem th√™m <i class="fas fa-chevron-down"></i>';
            } else {
                messageContent.classList.add('expanded');
                this.innerHTML = 'Thu g·ªçn <i class="fas fa-chevron-up"></i>';
            }
        });
    });
    
    // Hi·ªáu ·ª©ng hover cho c√°c card
    contactCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.classList.add('card-hover');
        });
        
        card.addEventListener('mouseleave', function() {
            this.classList.remove('card-hover');
        });
    });
}

/**
 * Kh·ªüi t·∫°o c√°c h√¨nh n·ªïi trong background
 */
function initFloatingShapes() {
    // ƒê·∫£m b·∫£o c√°c shapes ƒë∆∞·ª£c t·∫°o v√† c√≥ hi·ªáu ·ª©ng
    const floatingShapes = document.querySelector('.floating-shapes');
    if (!floatingShapes) return;
    
    // Th√™m CSS animation cho c√°c shapes n·∫øu ch∆∞a c√≥
    const styleExists = document.getElementById('floating-shapes-style');
    if (!styleExists) {
        const style = document.createElement('style');
        style.id = 'floating-shapes-style';
        style.textContent = `
            @keyframes float {
                0% { transform: translate(0, 0) rotate(0deg); }
                25% { transform: translate(10px, -10px) rotate(5deg); }
                50% { transform: translate(0, -20px) rotate(0deg); }
                75% { transform: translate(-10px, -10px) rotate(-5deg); }
                100% { transform: translate(0, 0) rotate(0deg); }
            }
            
            .shape {
                position: absolute;
                background: rgba(59, 130, 246, 0.1);
                border-radius: 50%;
                animation: float 15s ease-in-out infinite;
            }
            
            .shape-1 {
                width: 120px;
                height: 120px;
                top: 10%;
                left: 5%;
                animation-delay: 0s;
            }
            
            .shape-2 {
                width: 80px;
                height: 80px;
                top: 60%;
                right: 10%;
                animation-delay: 2s;
                background: rgba(16, 185, 129, 0.1);
            }
            
            .shape-3 {
                width: 100px;
                height: 100px;
                bottom: 10%;
                left: 15%;
                animation-delay: 4s;
                background: rgba(245, 158, 11, 0.1);
            }
            
            .shape-4 {
                width: 50px;
                height: 50px;
                top: 30%;
                right: 20%;
                animation-delay: 6s;
                background: rgba(239, 68, 68, 0.1);
            }
        `;
        
        document.head.appendChild(style);
    }
}

/**
 * S·ª≠a l·ªói cu·ªôn trang
 */
function fixBodyScrolling() {
    // ƒê·∫£m b·∫£o body c√≥ th·ªÉ cu·ªôn
    document.body.style.overflow = 'auto';
    document.body.style.height = 'auto';
    
    // X√≥a b·∫•t k·ª≥ inline style n√†o c√≥ th·ªÉ g√¢y ra v·∫•n ƒë·ªÅ cu·ªôn
    document.documentElement.style.overflow = 'auto';
    document.documentElement.style.height = 'auto';
    
    // Fix cho iOS Safari
    document.ontouchmove = function(e) {
        return true;
    };
    
    // Lo·∫°i b·ªè c√°c event handler c√≥ th·ªÉ ngƒÉn ch·∫∑n cu·ªôn trang
    window.onscroll = null;
    document.onmousewheel = null;
    document.ontouchmove = null;
    document.onwheel = null;
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o popup
 */
function showContactNotification(message, type = 'success') {
    const container = document.createElement('div');
    container.className = 'contact-notification ' + type;
    container.innerHTML = `
        <div class="notification-icon">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
        </div>
        <div class="notification-message">${message}</div>
        <div class="notification-close"><i class="fas fa-times"></i></div>
    `;
    
    document.body.appendChild(container);
    
    // Hi·ªáu ·ª©ng hi·ªÉn th·ªã
    setTimeout(() => {
        container.classList.add('show');
    }, 10);
    
    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    const timeout = setTimeout(() => {
        hideNotification(container);
    }, 5000);
    
    // X·ª≠ l√Ω ƒë√≥ng th√¥ng b√°o khi click
    const closeBtn = container.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
        clearTimeout(timeout);
        hideNotification(container);
    });
}

/**
 * ·∫®n th√¥ng b√°o v·ªõi animation
 */
function hideNotification(notification) {
    notification.classList.remove('show');
    notification.classList.add('hide');
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 300);
}

// Export c√°c h√†m c·∫ßn thi·∫øt ƒë·ªÉ s·ª≠ d·ª•ng t·ª´ b√™n ngo√†i
window.showContactNotification = showContactNotification;
window.validateContactForm = validateContactForm;